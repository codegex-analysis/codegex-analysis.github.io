{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Codegex is a regular-expression-based approach for automated code review that uses several strategies to extract analysis contexts (syntax and type information) from program texts Workflow The above figure shows an overview of Codegex workflow. It has three steps: preprocessing, regex-based analyzing and PR comment generating. Given a diff patch in a PR (Pull Request), our tool first splits the text into program statements by terminators for Java programs (i.e. ; , { , } ), and ignores deletions and comments. Then, the regex-based Analyzer applies keyword filtering and regex matching on each statement to find buggy code. The analyzer may also use analysis heuristics, diff search and online search, to improve the accuracy of some patterns, like UI INHERITANCE UNSAFE GETRESOURCE that gives a warning saying that the usage of this.getClass() .getResource() may be unsafe if this class is extended by a class in another package. Its output is a JSON file that records bug instances that includes pattern type, description, source information and priority. Finally, the PR Comment generator sends requests to annotate code and leave code review comments using Github API.","title":"Home"},{"location":"#workflow","text":"The above figure shows an overview of Codegex workflow. It has three steps: preprocessing, regex-based analyzing and PR comment generating. Given a diff patch in a PR (Pull Request), our tool first splits the text into program statements by terminators for Java programs (i.e. ; , { , } ), and ignores deletions and comments. Then, the regex-based Analyzer applies keyword filtering and regex matching on each statement to find buggy code. The analyzer may also use analysis heuristics, diff search and online search, to improve the accuracy of some patterns, like UI INHERITANCE UNSAFE GETRESOURCE that gives a warning saying that the usage of this.getClass() .getResource() may be unsafe if this class is extended by a class in another package. Its output is a JSON file that records bug instances that includes pattern type, description, source information and priority. Finally, the PR Comment generator sends requests to annotate code and leave code review comments using Github API.","title":"Workflow"},{"location":"comparison/","text":"Github Projects Project Commit Line of Code spring-boot-api-project-seed c305af6a6bb2b698b02d731ac27218bff51c5c1c 478 spring-boot-projects 2071c1da1f27e6e5034f7619c8c08d84cab71e77 3045 jetty.project 1cb0a4978f86f6d0800bb8a4262b7810a253c581 329493 heritrix3 37ce8d694590b0cf8cbe0a38a58c5f8ee719c4f0 41275 webcam-capture edc89234067cba2766c2d031cf61a9b592e3600c 16021 paho.mqtt.java 6f35dcb785597a6fd49091efe2dba47513939420 28441 smarthome 56df0fa09d84912b96c7c8d1f229ca59938d4858 181527 SpringBootUnity 073cb8ef5e32ad195c60bb52f54b94ec31e5410d 5861 rakam-api 26ffbc75c3cc2e747d721b96ad6b1f51da09ea0f 14193 kafka-streams-machine-learning-examples 3977e3928d2719fc710bb3d202851ee8904be2e7 99401 quickfixj 1968f7abb981f486539a4cf3e4ae81fa5c554ec8 1279492 nacos-spring-project d61ba1761b5fb875de03b9377b7e3c5cb7e44d9b 7398 jave2 23a26109f59a04e65a8a1dc3a0e42be0033a2e7c 4339 hprose-java a535b8682547549ba9cc3a04e7acdc9af9894708 15845 spring-cloud-release 10801b4df944fdb5d2dae612ca957914492af6ab 488 lavagna 385016963bfc2201e082f5e7edfe81ef1146fc55 20694 nacos-spring-boot-project d77d02926da347bc72f900a2c95bfd8229132197 1802 java-speech-api bd278833f12186750f321bdbba26aae747de51b2 1374 java-uuid-generator 959d0e8c142425e8ed0cdbf0f0ad14bb5ae9d451 3073 enunciate f69749c57fcb8eaee8dbd12d01e916ac0c65cc3f 54210 camelinaction2 9921df2acbe6e3c1d825f4455668097db0205841 17832 wro4j 75922b77298968586643e6ac0f5fcf8fd985a904 33410 biojava 1d03fb4faaa435aff8903483930b60eac8eff56d 117779 GlobalPlatformPro 2cde69d4b966bff11cd363c395ed5ff978289257 3732 thorntail d76ec226e3e74deef35a54d7f2d6bf651d286be7 137847 spring-comparing-template-engines 2bb3333e323dfebd2c932403926e52cf8fb247f8 908 jmc 0c7ae2a0f6423d76f74d9dba53fe5d693a3a7c0c 163462 sharpen 0a539c4e6ab58c462baf3b999c1f4a53b6fa113e 9334 Benchmark ef7ec5f317c6c47d935a955c6efc35e0e583a40c 146265 owasp-java-encoder fa5c589fb6037e0b7e9bb6b21b537a5411420ac7 3264 core 4c18b6b8046ce0490ae8f9bded31fe3d248a7f73 108489 java-spring-cloud 76fc7de41a7c26590c9fff59d7ef211d87f7cc3f 5340 Springy-Store-Microservices 786c0c7cf62364c94fe9a148310567c9adbfb244 2903 jmh f3e7d82b0b68ab345f81e0598c7f850c5b334027 249879 fabric8-maven-plugin 2631458a22ccc8f4110c090b3564b9178dc5ec13 48011 simple-sso d3b33a5788c071f294a5a41a61192ef03ba1e744 390 raml-for-jax-rs aa24bf32b926f23f5c1826fdada07f4c1cc64c77 14789 common-project ff019b8b24a984fb265f92d840a1a0705f174fe6 5754 hadoop-mini-clusters 787a02c728a1035c0742a22468a227616dc748d0 9499 qulice e296098d1722f13ad6644f6a2958b5e8d1cbc47c 6557 superword fad61fad5ea688ff5bf8838ee2a9b5ba2ae81349 9079 java-microservice 2880ffb60cf0cd0afd8455cbeb1789a51ffbb62f 2593 ORCID-Source 647c4206daabb8b6d9bdb44059aabc07c16540e7 247335 demo-rest-jersey-spring a46ab55dbb6ecd5e97cdc253036b068d02e5573b 1115 aws-java-sample 159b1d4edec782c28a13e1cf891f87d01fb6ff0f 89 camelinaction 1d74f64c4aefd318baee21cb1b53928bc9f45763 7586 ShoppingCart f3793243e868f246806d54571c94c7251db2c22a 1255 iot-dc3 62fd0a51a59e249b7de66e87ea7978edffff7ee0 14671 gchisto d140c4d313182b0a06af10905be1ece648c35932 6574 opencc4j 9ccd603beadde849faba169f7b6b590e0c73ef49 872 visualee 88732d9dbe5031dad9c9f85a4c4b35e5f1551f95 3762 ProjectAres 7484cb81fcc33814fe26812684660da4e0dbd671 90184 appbundle-maven-plugin 4cdaf7e0da95c83bc8a045ba40cb3eef45d25a5f 420 reactive-ms-example c40d5855ce2c5e0b6dfb06aa4a421ae9560d6548 1485 microservices-sample 994956f01093c78eb7d8275c1a30c8e385e498d4 672 hope-cloud b3a0673325210efaa97502c2d3eb584d18f1dafb 135 javaee7-essentials-archetype 3ea15d451574e118ef9ccff69a5e6ac9d6371a7b 5 pandomium 4d730c265ad324aea9dada15a29c9465169ce475 6083 confucius-commons ffbe5331df105c4a95ee2f0b95a4eeb6df6a9caa 3341 jol eea9f9d77e837075e0e237f061a7716e05237408 7204 pdt ed9fe5920966ceb5cd9242263bb6a1eff9147afc 275896 deptective e5bd0f1dcc9dc23c1b3175615049e6e30b093d46 2730 cms-admin-end 40689458c9cce66818636be5effc47213098b960 8229 cli-spring-boot-scaffold 780ad4c90efae4d27e4faf1884ebfd5fe6541944 2425 flyer-maker 5242400cb05a71b87f4bac8b6ace18ef98eb41c3 757 spring-context-support ed713c9079b9944de69f775fba5eb90afa4ee4dc 3061 reddit-bot d98821abcbf9930ecbbd99a4a7634b3c0ca59461 1499 cloud-espm-v2 487798e23a736bda0e12778da1594072fd1f5557 4675 sldeditor 4b33b4e9029402d89335da2bb7d427a39d796b19 103566 missinglink d632aa6d1feeb290b6441dc836c66c9384ea5703 6483 osgi.enroute e3ecd08fd038432fd588d7b41b07cacd54452c35 991 spring4.x-project a023e54cc742e490e2724bf4a979d2864997b22a 576 spring-mvc-angular-js-hibernate-bootstrap-java-single-page-jwt-auth-rest-api-webapp-framework a38cbd855f449ce45470931345d62ee1c9f976d6 2000 spring-boot-graalvm c99075364aa8abb37444cfcd94b9a88f005927c1 48 oauth2-server 078b2138e7e7c7704bc627fbf8fc6c3e740f892b 2977 bitfinex-v2-wss-api-java fda4a7aa96f24f4814c1d5bfa2ca66465de3b549 6412 lombok.maven 12666badea6a45174710a45ce3b7abe0a9d81352 565 client-maven-plugin 76f02d5805c45f357013d2a0cad3f418d8a8c4aa 823 travels-java-api 3a7fd4cc36938666f09ee5945a28345763105075 2953 cargotracker 46424c6d8b708528c7ced6f5cee825601ead73e2 5973 tij4-maven de72e0e12263facb1e226ebdbec5b489785106bc 17890 code-assert a722c20b1541cabc42f08eb4d33fd46e9745da84 7612 aem-component-generator d966ead3891e1d2a2de8aa5130b203837229b875 1648 cloud-opensource-java 4edd644c9453da16cd448e2bbb1b85ac1cf7e168 10509 javaee8-essentials-archetype 9650c1391f49df9f549e142aa501b58374bb2a1b 18 Angular2AndJavaEE 92a87643e97eb72a406a2118d97fe27b958f106c 1424 GetOldTweets-java 9975cd652dad16c7000d0a5fcdbed9e9836b9256 279 Project-16x16 47bd409b8e320c24c5e85d3038518e4d0b5f6d58 5352 slib 21c57a5c52a2d0557fec8d9de7b46252452cdcdc 22107 javaee-javascript f1ea2531a0a28ac55c7993b4c5668ef8fac6d783 348 community 8c68cfde39007f89d3510cdb16c82dcf05a6ff4e 3720 spring-boot-java-swing-reservations 81be071a2d2a7dab57e1ab2850b5ae3a3fb258c5 5299 asmsupport b3933a900c6d51046d402969ce897e5549eea914 26710 projectforge 20d9486426610e172de105b379844ee3340f4ea2 122849 test-driven-spring-boot 2b947d9826f1bfda0cad5035fc29b5ed85f70358 1073 Deeplearning4J eea1cf062af827b9ee7a6a655e00e4ea78d73a51 706 java 4c8192a7fa28c3aeeb93301e5608d2d4ec7e5b38 367 spring-zeebe 9e9d6bd41074aa669a86a88f8276558104849067 1583 triava 049484fa865691a7e27db4de7a57aed98c0654d9 5916 qtiworks 2d8c502d8f2b266fd80197ad19bcae3d4566276a 51636 Comparison Results Quality of Warnings We evaluate Codegex (C) and SpotBugs (S) on 52 open-source Java projects in GitHub. We measure the quality of the warnings generated by each tool. Relative accuracy and recall are two widely used metrics to compare the quality of analysis results, whereas Jaccard index (J(S, C)) is used to measure the similarity for two sets of data (between S and C). The high Jaccard index between the warnings generated by SpotBugs and those generated by Codegex (0.86) indicates that the analysis results of Codegex are comparable to that of SpotBugs. As highlighted in Table 5, Codegex outperforms SpotBugs in accuracy and recall for seven patterns . Moreover, Codegex also achieved comparable results with SpotBugs in the overall accuracy and recall. In Table 5, we also observe that: (1) for most bug patterns, Codegex can find one additional TP than SpotBugs, and (2) Codegex performs particularly well for the DMI_RANDOM_USED_ONLY_ONCE pattern by finding more TPs and fewer FNs. Analysis Time Codegex can run up to 24k faster than SpotBugs when considering initial compilation time and analysis time. For generating analysis report, Codegex can run up to 590X faster.","title":"Comparison with SpotBugs"},{"location":"comparison/#github-projects","text":"Project Commit Line of Code spring-boot-api-project-seed c305af6a6bb2b698b02d731ac27218bff51c5c1c 478 spring-boot-projects 2071c1da1f27e6e5034f7619c8c08d84cab71e77 3045 jetty.project 1cb0a4978f86f6d0800bb8a4262b7810a253c581 329493 heritrix3 37ce8d694590b0cf8cbe0a38a58c5f8ee719c4f0 41275 webcam-capture edc89234067cba2766c2d031cf61a9b592e3600c 16021 paho.mqtt.java 6f35dcb785597a6fd49091efe2dba47513939420 28441 smarthome 56df0fa09d84912b96c7c8d1f229ca59938d4858 181527 SpringBootUnity 073cb8ef5e32ad195c60bb52f54b94ec31e5410d 5861 rakam-api 26ffbc75c3cc2e747d721b96ad6b1f51da09ea0f 14193 kafka-streams-machine-learning-examples 3977e3928d2719fc710bb3d202851ee8904be2e7 99401 quickfixj 1968f7abb981f486539a4cf3e4ae81fa5c554ec8 1279492 nacos-spring-project d61ba1761b5fb875de03b9377b7e3c5cb7e44d9b 7398 jave2 23a26109f59a04e65a8a1dc3a0e42be0033a2e7c 4339 hprose-java a535b8682547549ba9cc3a04e7acdc9af9894708 15845 spring-cloud-release 10801b4df944fdb5d2dae612ca957914492af6ab 488 lavagna 385016963bfc2201e082f5e7edfe81ef1146fc55 20694 nacos-spring-boot-project d77d02926da347bc72f900a2c95bfd8229132197 1802 java-speech-api bd278833f12186750f321bdbba26aae747de51b2 1374 java-uuid-generator 959d0e8c142425e8ed0cdbf0f0ad14bb5ae9d451 3073 enunciate f69749c57fcb8eaee8dbd12d01e916ac0c65cc3f 54210 camelinaction2 9921df2acbe6e3c1d825f4455668097db0205841 17832 wro4j 75922b77298968586643e6ac0f5fcf8fd985a904 33410 biojava 1d03fb4faaa435aff8903483930b60eac8eff56d 117779 GlobalPlatformPro 2cde69d4b966bff11cd363c395ed5ff978289257 3732 thorntail d76ec226e3e74deef35a54d7f2d6bf651d286be7 137847 spring-comparing-template-engines 2bb3333e323dfebd2c932403926e52cf8fb247f8 908 jmc 0c7ae2a0f6423d76f74d9dba53fe5d693a3a7c0c 163462 sharpen 0a539c4e6ab58c462baf3b999c1f4a53b6fa113e 9334 Benchmark ef7ec5f317c6c47d935a955c6efc35e0e583a40c 146265 owasp-java-encoder fa5c589fb6037e0b7e9bb6b21b537a5411420ac7 3264 core 4c18b6b8046ce0490ae8f9bded31fe3d248a7f73 108489 java-spring-cloud 76fc7de41a7c26590c9fff59d7ef211d87f7cc3f 5340 Springy-Store-Microservices 786c0c7cf62364c94fe9a148310567c9adbfb244 2903 jmh f3e7d82b0b68ab345f81e0598c7f850c5b334027 249879 fabric8-maven-plugin 2631458a22ccc8f4110c090b3564b9178dc5ec13 48011 simple-sso d3b33a5788c071f294a5a41a61192ef03ba1e744 390 raml-for-jax-rs aa24bf32b926f23f5c1826fdada07f4c1cc64c77 14789 common-project ff019b8b24a984fb265f92d840a1a0705f174fe6 5754 hadoop-mini-clusters 787a02c728a1035c0742a22468a227616dc748d0 9499 qulice e296098d1722f13ad6644f6a2958b5e8d1cbc47c 6557 superword fad61fad5ea688ff5bf8838ee2a9b5ba2ae81349 9079 java-microservice 2880ffb60cf0cd0afd8455cbeb1789a51ffbb62f 2593 ORCID-Source 647c4206daabb8b6d9bdb44059aabc07c16540e7 247335 demo-rest-jersey-spring a46ab55dbb6ecd5e97cdc253036b068d02e5573b 1115 aws-java-sample 159b1d4edec782c28a13e1cf891f87d01fb6ff0f 89 camelinaction 1d74f64c4aefd318baee21cb1b53928bc9f45763 7586 ShoppingCart f3793243e868f246806d54571c94c7251db2c22a 1255 iot-dc3 62fd0a51a59e249b7de66e87ea7978edffff7ee0 14671 gchisto d140c4d313182b0a06af10905be1ece648c35932 6574 opencc4j 9ccd603beadde849faba169f7b6b590e0c73ef49 872 visualee 88732d9dbe5031dad9c9f85a4c4b35e5f1551f95 3762 ProjectAres 7484cb81fcc33814fe26812684660da4e0dbd671 90184 appbundle-maven-plugin 4cdaf7e0da95c83bc8a045ba40cb3eef45d25a5f 420 reactive-ms-example c40d5855ce2c5e0b6dfb06aa4a421ae9560d6548 1485 microservices-sample 994956f01093c78eb7d8275c1a30c8e385e498d4 672 hope-cloud b3a0673325210efaa97502c2d3eb584d18f1dafb 135 javaee7-essentials-archetype 3ea15d451574e118ef9ccff69a5e6ac9d6371a7b 5 pandomium 4d730c265ad324aea9dada15a29c9465169ce475 6083 confucius-commons ffbe5331df105c4a95ee2f0b95a4eeb6df6a9caa 3341 jol eea9f9d77e837075e0e237f061a7716e05237408 7204 pdt ed9fe5920966ceb5cd9242263bb6a1eff9147afc 275896 deptective e5bd0f1dcc9dc23c1b3175615049e6e30b093d46 2730 cms-admin-end 40689458c9cce66818636be5effc47213098b960 8229 cli-spring-boot-scaffold 780ad4c90efae4d27e4faf1884ebfd5fe6541944 2425 flyer-maker 5242400cb05a71b87f4bac8b6ace18ef98eb41c3 757 spring-context-support ed713c9079b9944de69f775fba5eb90afa4ee4dc 3061 reddit-bot d98821abcbf9930ecbbd99a4a7634b3c0ca59461 1499 cloud-espm-v2 487798e23a736bda0e12778da1594072fd1f5557 4675 sldeditor 4b33b4e9029402d89335da2bb7d427a39d796b19 103566 missinglink d632aa6d1feeb290b6441dc836c66c9384ea5703 6483 osgi.enroute e3ecd08fd038432fd588d7b41b07cacd54452c35 991 spring4.x-project a023e54cc742e490e2724bf4a979d2864997b22a 576 spring-mvc-angular-js-hibernate-bootstrap-java-single-page-jwt-auth-rest-api-webapp-framework a38cbd855f449ce45470931345d62ee1c9f976d6 2000 spring-boot-graalvm c99075364aa8abb37444cfcd94b9a88f005927c1 48 oauth2-server 078b2138e7e7c7704bc627fbf8fc6c3e740f892b 2977 bitfinex-v2-wss-api-java fda4a7aa96f24f4814c1d5bfa2ca66465de3b549 6412 lombok.maven 12666badea6a45174710a45ce3b7abe0a9d81352 565 client-maven-plugin 76f02d5805c45f357013d2a0cad3f418d8a8c4aa 823 travels-java-api 3a7fd4cc36938666f09ee5945a28345763105075 2953 cargotracker 46424c6d8b708528c7ced6f5cee825601ead73e2 5973 tij4-maven de72e0e12263facb1e226ebdbec5b489785106bc 17890 code-assert a722c20b1541cabc42f08eb4d33fd46e9745da84 7612 aem-component-generator d966ead3891e1d2a2de8aa5130b203837229b875 1648 cloud-opensource-java 4edd644c9453da16cd448e2bbb1b85ac1cf7e168 10509 javaee8-essentials-archetype 9650c1391f49df9f549e142aa501b58374bb2a1b 18 Angular2AndJavaEE 92a87643e97eb72a406a2118d97fe27b958f106c 1424 GetOldTweets-java 9975cd652dad16c7000d0a5fcdbed9e9836b9256 279 Project-16x16 47bd409b8e320c24c5e85d3038518e4d0b5f6d58 5352 slib 21c57a5c52a2d0557fec8d9de7b46252452cdcdc 22107 javaee-javascript f1ea2531a0a28ac55c7993b4c5668ef8fac6d783 348 community 8c68cfde39007f89d3510cdb16c82dcf05a6ff4e 3720 spring-boot-java-swing-reservations 81be071a2d2a7dab57e1ab2850b5ae3a3fb258c5 5299 asmsupport b3933a900c6d51046d402969ce897e5549eea914 26710 projectforge 20d9486426610e172de105b379844ee3340f4ea2 122849 test-driven-spring-boot 2b947d9826f1bfda0cad5035fc29b5ed85f70358 1073 Deeplearning4J eea1cf062af827b9ee7a6a655e00e4ea78d73a51 706 java 4c8192a7fa28c3aeeb93301e5608d2d4ec7e5b38 367 spring-zeebe 9e9d6bd41074aa669a86a88f8276558104849067 1583 triava 049484fa865691a7e27db4de7a57aed98c0654d9 5916 qtiworks 2d8c502d8f2b266fd80197ad19bcae3d4566276a 51636","title":"Github Projects"},{"location":"comparison/#comparison-results","text":"","title":"Comparison Results"},{"location":"comparison/#quality-of-warnings","text":"We evaluate Codegex (C) and SpotBugs (S) on 52 open-source Java projects in GitHub. We measure the quality of the warnings generated by each tool. Relative accuracy and recall are two widely used metrics to compare the quality of analysis results, whereas Jaccard index (J(S, C)) is used to measure the similarity for two sets of data (between S and C). The high Jaccard index between the warnings generated by SpotBugs and those generated by Codegex (0.86) indicates that the analysis results of Codegex are comparable to that of SpotBugs. As highlighted in Table 5, Codegex outperforms SpotBugs in accuracy and recall for seven patterns . Moreover, Codegex also achieved comparable results with SpotBugs in the overall accuracy and recall. In Table 5, we also observe that: (1) for most bug patterns, Codegex can find one additional TP than SpotBugs, and (2) Codegex performs particularly well for the DMI_RANDOM_USED_ONLY_ONCE pattern by finding more TPs and fewer FNs.","title":"Quality of Warnings"},{"location":"comparison/#analysis-time","text":"Codegex can run up to 24k faster than SpotBugs when considering initial compilation time and analysis time. For generating analysis report, Codegex can run up to 590X faster.","title":"Analysis Time"},{"location":"issues/","text":"ID Issues State PR State Title 1 https://github.com/spotbugs/spotbugs-maven-plugin/issues/306 Confirmed Merged Maven plugin failed to run on basic options (printing run detectors and analyzed classes) 2 https://github.com/spotbugs/spotbugs/issues/1470 Confirmed Merged Inconsistency in SpotBugs Bug Description 3 https://github.com/spotbugs/spotbugs/issues/1472 Confirmed Merged SA_LOCAL_SELF_COMPUTATION bug 4 https://github.com/spotbugs/spotbugs/issues/1473 Open False negatives on SA_FIELD_SELF_COMPUTATION and SA_LOCAL_SELF_COMPUTATION 5 https://github.com/spotbugs/spotbugs/issues/1464 Confirmed Merged Should issue warning for SecureRandom object created and used only once 6 https://github.com/spotbugs/spotbugs/issues/1496 Open Incomplete support (False negatives) on EQ_COMPARING_CLASS_NAMES 7 https://github.com/spotbugs/spotbugs/issues/1497 Open Inappropriate warnings in the context of write or log methods 8 https://github.com/spotbugs/spotbugs/issues/1498 Confirmed Merged False Negative for IM_MULTIPLYING_RESULT_OF_IREM on the official example 9 https://github.com/spotbugs/spotbugs/issues/1501 Confirmed False negative on VA_FORMAT_STRING_USES_NEWLINE 10 https://github.com/spotbugs/spotbugs/issues/1504 Confirmed Merged False negative on DMI_RANDOM_USED_ONLY_ONCE 11 https://github.com/spotbugs/spotbugs/issues/1517 Open False negatives on DLS_OVERWRITTEN_INCREMENT 12 https://github.com/spotbugs/spotbugs/issues/1518 Confirmed Merged False negatives on RV_01_TO_INT 13 https://github.com/spotbugs/spotbugs/issues/1523 Confirmed Merged Inconsistent bug description on EQ_COMPARING_CLASS_NAMES 14 https://github.com/spotbugs/spotbugs/issues/1927 Open False negatives on IO_INEFFICIENT_INDEX_OF 15 https://github.com/spotbugs/spotbugs/issues/1928 Open False negatives on DMI_USELESS_SUBSTRING 16 https://github.com/spotbugs/spotbugs/issues/1929 Confirmed False negatives on DMI_HARDCODED_ABSOLUTE_FILENAME","title":"Filed Issues in SpotBugs"},{"location":"patterns/","text":"The bug patterns in Codegex are derived from SpotBugs. We select SpotBugs because it (1) is the most well-known and most used static analyzer, and (2) can detect more diverse types of bugs than other tools (e.g., Error Prone, PMD, Infer). Motivating Study Static analysis tools rely on bug patterns to detect a potential problem or bug in a given input program. We conducted a study of SpotBugs patterns and divide them into four categories (inter-class, class, method and statement) according to the context scope they use. Research Questions RQ1 : What is the scope of analysis needed to detect a bug pattern in SpotBugs? RQ2 : What program analysis techniques are important for detecting a bug pattern in SpotBugs? We provides the link of study table of SpotBugs' 451 patterns (2021/01) here . Codegex patterns Number of Implemented Patterns Project Number of Patterns Bad practice (BAD_PRACTICE) 22 Correctness (CORRECTNESS) 37 Malicious code vulnerability (MALICIOUS_CODE) 1 Multithreaded correctness (MT_CORRECTNESS) 5 Performance (PERFORMANCE) 14 Dodgy code (STYLE) 8 Total 87 Supported patterns Bad practice (BAD_PRACTICE) CNT: Rough value of known constant found (CNT_ROUGH_CONSTANT_VALUE) UI: Usage of GetResource may be unsafe if class is extended (UI_INHERITANCE_UNSAFE_GETRESOURCE) IMSE: Dubious catching of IllegalMonitorStateException (IMSE_DONT_CATCH_IMSE) Nm: Use of identifier that is a keyword in later versions of Java (NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER) Nm: Use of identifier that is a keyword in later versions of Java (NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER) Dm: Method invokes dangerous method runFinalizersOnExit (DM_RUN_FINALIZERS_ON_EXIT) FI: Explicit invocation of finalizer (FI_EXPLICIT_INVOCATION) ES: Comparison of String objects using == or != (ES_COMPARING_STRINGS_WITH_EQ) Nm: Method names should start with a lower case letter (NM_METHOD_NAMING_CONVENTION) Nm: Class names shouldn\u2019t shadow simple name of implemented interface (NM_SAME_SIMPLE_NAME_AS_INTERFACE) Nm: Class names shouldn\u2019t shadow simple name of superclass (NM_SAME_SIMPLE_NAME_AS_SUPERCLASS) Nm: Class names should start with an upper case letter (NM_CLASS_NAMING_CONVENTION) Nm: Class is not derived from an Exception, even though it is named as such (NM_CLASS_NOT_EXCEPTION) Se: The readResolve method must be declared with a return type of Object. (SE_READ_RESOLVE_MUST_RETURN_OBJECT) Se: serialVersionUID isn\u2019t final (SE_NONFINAL_SERIALVERSIONID) Se: serialVersionUID isn\u2019t static (SE_NONSTATIC_SERIALVERSIONID) Se: serialVersionUID isn\u2019t long (SE_NONLONG_SERIALVERSIONID) RC: Suspicious reference comparison of Boolean values (RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN) FS: Format string should use %n rather than n (VA_FORMAT_STRING_USES_NEWLINE) DMI: Random object created and used only once (DMI_RANDOM_USED_ONLY_ONCE) PZ: Don\u2019t reuse entry objects in iterators (PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS) DMI: Don\u2019t use removeAll to clear a collection (DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION) Correctness (CORRECTNESS) IL: A collection is added to itself (IL_CONTAINER_ADDED_TO_ITSELF) Dm: Useless/vacuous call to EasyMock method (DMI_VACUOUS_CALL_TO_EASYMOCK_METHOD) DMI: BigDecimal constructed from double that isn\u2019t represented precisely (DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE) RV: Random value from 0 to 1 is coerced to the integer 0 (RV_01_TO_INT) Dm: Incorrect combination of Math.max and Math.min (DM_INVALID_MIN_MAX) Nm: Class defines hashcode(); should it be hashCode()? (NM_LCASE_HASHCODE) Nm: Class defines tostring(); should it be toString()? (NM_LCASE_TOSTRING) Nm: Class defines equal(Object); should it be equals(Object)? (NM_BAD_EQUAL) Se: The readResolve method must not be declared as a static method. (SE_READ_RESOLVE_IS_STATIC) Se: Method must be private in order for serialization to work (SE_METHOD_MUST_BE_PRIVATE) RV: Exception created and dropped rather than thrown (RV_EXCEPTION_NOT_THROWN) DMI: Reversed method arguments (DMI_ARGUMENTS_WRONG_ORDER) EC: Call to equals(null) (EC_NULL_ARG) BIT: Bitwise OR of signed byte value (BIT_IOR_OF_SIGNED_BYTE) BIT: Check for sign of bitwise operation involving negative number (BIT_SIGNED_CHECK_HIGH_BIT) BIT: Incompatible bit masks (BIT_AND) BIT: Check to see if ((\u2026) & 0) == 0 (BIT_AND_ZZ) BIT: Incompatible bit masks (BIT_IOR) SA: Self assignment of field (SA_FIELD_SELF_ASSIGNMENT) SA: Nonsensical self computation involving a field (e.g., x & x) (SA_FIELD_SELF_COMPUTATION) SA: Nonsensical self computation involving a variable (e.g., x & x) (SA_LOCAL_SELF_COMPUTATION) SA: Self comparison of field with itself (SA_FIELD_SELF_COMPARISON) SA: Self comparison of value with itself (SA_LOCAL_SELF_COMPARISON) DLS: Useless increment in return statement (DLS_DEAD_LOCAL_INCREMENT_IN_RETURN) FE: Doomed test for equality to NaN (FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER) BC: Impossible downcast of toArray() result (BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY) RE: \u201c.\u201d or \u201c|\u201d used for regular expression (RE_POSSIBLE_UNINTENDED_PATTERN) RE: File.separator used for regular expression (RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION) DLS: Overwritten increment (DLS_OVERWRITTEN_INCREMENT) BSHIFT: Possible bad parsing of shift operation (BSHIFT_WRONG_ADD_PRIORITY) IM: Integer multiply of result of integer remainder (IM_MULTIPLYING_RESULT_OF_IREM) USELESS_STRING: Invocation of toString on an unnamed array (DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY) DMI: Bad constant value for month (DMI_BAD_MONTH) QBA: Method assigns boolean literal in boolean expression (QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT) DMI: Vacuous call to collections (DMI_VACUOUS_SELF_COLLECTION_CALL) DMI: D\u2019oh! A nonsensical method invocation (DMI_DOH) DMI: Collections should not contain themselves (DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES) Malicious code vulnerability (MALICIOUS_CODE) FI: Finalizer should be protected, not public (FI_PUBLIC_SHOULD_BE_PROTECTED) Multithreaded correctness (MT_CORRECTNESS) STCAL: Static Calendar field (STCAL_STATIC_CALENDAR_INSTANCE) STCAL: Static DateFormat (STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE) VO: A volatile reference to an array doesn\u2019t treat the array elements as volatile (VO_VOLATILE_REFERENCE_TO_ARRAY) WL: Synchronization on getClass rather than class literal (WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL) No: Using notify() rather than notifyAll() (NO_NOTIFY_NOT_NOTIFYALL) Performance (PERFORMANCE) Dm: Maps and sets of URLs can be performance hogs (DMI_COLLECTION_OF_URLS) Dm: Method invokes inefficient new String(String) constructor (DM_STRING_CTOR) Dm: Method invokes inefficient new String() constructor (DM_STRING_VOID_CTOR) Dm: Method invokes inefficient Boolean constructor; use Boolean.valueOf(\u2026) instead (DM_BOOLEAN_CTOR) Bx: Method invokes inefficient Number constructor; use static valueOf instead (DM_NUMBER_CTOR) Bx: Method invokes inefficient floating-point Number constructor; use static valueOf instead (DM_FP_NUMBER_CTOR) Bx: Method allocates a boxed primitive just to call toString (DM_BOXED_PRIMITIVE_TOSTRING) Bx: Boxing/unboxing to parse a primitive (DM_BOXED_PRIMITIVE_FOR_PARSING) Bx: Boxing a primitive to compare (DM_BOXED_PRIMITIVE_FOR_COMPARE) Bx: Primitive value is boxed then unboxed to perform primitive coercion (BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION) Dm: Method allocates an object, only to get the class object (DM_NEW_FOR_GETCLASS) Dm: Use the nextInt method of Random rather than nextDouble to generate a random integer (DM_NEXTINT_VIA_NEXTDOUBLE) IIO: Inefficient use of String.indexOf(String) (IIO_INEFFICIENT_INDEX_OF) IIO: Inefficient use of String.lastIndexOf(String) (IIO_INEFFICIENT_LAST_INDEX_OF) Dodgy code (STYLE) NP: Immediate dereference of the result of readLine() (NP_IMMEDIATE_DEREFERENCE_OF_READLINE) RV: Method discards result of readLine after checking if it is non-null (RV_DONT_JUST_NULL_CHECK_READLINE) UCF: Useless control flow to next line (UCF_USELESS_CONTROL_FLOW_NEXT_LINE) SA: Self assignment of local variable (SA_LOCAL_SELF_ASSIGNMENT) SA: Double assignment of local variable (SA_LOCAL_DOUBLE_ASSIGNMENT) SA: Double assignment of field (SA_FIELD_DOUBLE_ASSIGNMENT) DMI: Code contains a hard coded reference to an absolute pathname (DMI_HARDCODED_ABSOLUTE_FILENAME) DMI: Invocation of substring(0), which returns the original value (DMI_USELESS_SUBSTRING)","title":"Patterns"},{"location":"patterns/#motivating-study","text":"Static analysis tools rely on bug patterns to detect a potential problem or bug in a given input program. We conducted a study of SpotBugs patterns and divide them into four categories (inter-class, class, method and statement) according to the context scope they use.","title":"Motivating Study"},{"location":"patterns/#research-questions","text":"RQ1 : What is the scope of analysis needed to detect a bug pattern in SpotBugs? RQ2 : What program analysis techniques are important for detecting a bug pattern in SpotBugs? We provides the link of study table of SpotBugs' 451 patterns (2021/01) here .","title":"Research Questions"},{"location":"patterns/#codegex-patterns","text":"","title":"Codegex patterns"},{"location":"patterns/#number-of-implemented-patterns","text":"Project Number of Patterns Bad practice (BAD_PRACTICE) 22 Correctness (CORRECTNESS) 37 Malicious code vulnerability (MALICIOUS_CODE) 1 Multithreaded correctness (MT_CORRECTNESS) 5 Performance (PERFORMANCE) 14 Dodgy code (STYLE) 8 Total 87","title":"Number of Implemented Patterns"},{"location":"patterns/#supported-patterns","text":"","title":"Supported patterns"},{"location":"patterns/#bad-practice-bad_practice","text":"CNT: Rough value of known constant found (CNT_ROUGH_CONSTANT_VALUE) UI: Usage of GetResource may be unsafe if class is extended (UI_INHERITANCE_UNSAFE_GETRESOURCE) IMSE: Dubious catching of IllegalMonitorStateException (IMSE_DONT_CATCH_IMSE) Nm: Use of identifier that is a keyword in later versions of Java (NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER) Nm: Use of identifier that is a keyword in later versions of Java (NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER) Dm: Method invokes dangerous method runFinalizersOnExit (DM_RUN_FINALIZERS_ON_EXIT) FI: Explicit invocation of finalizer (FI_EXPLICIT_INVOCATION) ES: Comparison of String objects using == or != (ES_COMPARING_STRINGS_WITH_EQ) Nm: Method names should start with a lower case letter (NM_METHOD_NAMING_CONVENTION) Nm: Class names shouldn\u2019t shadow simple name of implemented interface (NM_SAME_SIMPLE_NAME_AS_INTERFACE) Nm: Class names shouldn\u2019t shadow simple name of superclass (NM_SAME_SIMPLE_NAME_AS_SUPERCLASS) Nm: Class names should start with an upper case letter (NM_CLASS_NAMING_CONVENTION) Nm: Class is not derived from an Exception, even though it is named as such (NM_CLASS_NOT_EXCEPTION) Se: The readResolve method must be declared with a return type of Object. (SE_READ_RESOLVE_MUST_RETURN_OBJECT) Se: serialVersionUID isn\u2019t final (SE_NONFINAL_SERIALVERSIONID) Se: serialVersionUID isn\u2019t static (SE_NONSTATIC_SERIALVERSIONID) Se: serialVersionUID isn\u2019t long (SE_NONLONG_SERIALVERSIONID) RC: Suspicious reference comparison of Boolean values (RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN) FS: Format string should use %n rather than n (VA_FORMAT_STRING_USES_NEWLINE) DMI: Random object created and used only once (DMI_RANDOM_USED_ONLY_ONCE) PZ: Don\u2019t reuse entry objects in iterators (PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS) DMI: Don\u2019t use removeAll to clear a collection (DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION)","title":"Bad practice (BAD_PRACTICE)"},{"location":"patterns/#correctness-correctness","text":"IL: A collection is added to itself (IL_CONTAINER_ADDED_TO_ITSELF) Dm: Useless/vacuous call to EasyMock method (DMI_VACUOUS_CALL_TO_EASYMOCK_METHOD) DMI: BigDecimal constructed from double that isn\u2019t represented precisely (DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE) RV: Random value from 0 to 1 is coerced to the integer 0 (RV_01_TO_INT) Dm: Incorrect combination of Math.max and Math.min (DM_INVALID_MIN_MAX) Nm: Class defines hashcode(); should it be hashCode()? (NM_LCASE_HASHCODE) Nm: Class defines tostring(); should it be toString()? (NM_LCASE_TOSTRING) Nm: Class defines equal(Object); should it be equals(Object)? (NM_BAD_EQUAL) Se: The readResolve method must not be declared as a static method. (SE_READ_RESOLVE_IS_STATIC) Se: Method must be private in order for serialization to work (SE_METHOD_MUST_BE_PRIVATE) RV: Exception created and dropped rather than thrown (RV_EXCEPTION_NOT_THROWN) DMI: Reversed method arguments (DMI_ARGUMENTS_WRONG_ORDER) EC: Call to equals(null) (EC_NULL_ARG) BIT: Bitwise OR of signed byte value (BIT_IOR_OF_SIGNED_BYTE) BIT: Check for sign of bitwise operation involving negative number (BIT_SIGNED_CHECK_HIGH_BIT) BIT: Incompatible bit masks (BIT_AND) BIT: Check to see if ((\u2026) & 0) == 0 (BIT_AND_ZZ) BIT: Incompatible bit masks (BIT_IOR) SA: Self assignment of field (SA_FIELD_SELF_ASSIGNMENT) SA: Nonsensical self computation involving a field (e.g., x & x) (SA_FIELD_SELF_COMPUTATION) SA: Nonsensical self computation involving a variable (e.g., x & x) (SA_LOCAL_SELF_COMPUTATION) SA: Self comparison of field with itself (SA_FIELD_SELF_COMPARISON) SA: Self comparison of value with itself (SA_LOCAL_SELF_COMPARISON) DLS: Useless increment in return statement (DLS_DEAD_LOCAL_INCREMENT_IN_RETURN) FE: Doomed test for equality to NaN (FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER) BC: Impossible downcast of toArray() result (BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY) RE: \u201c.\u201d or \u201c|\u201d used for regular expression (RE_POSSIBLE_UNINTENDED_PATTERN) RE: File.separator used for regular expression (RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION) DLS: Overwritten increment (DLS_OVERWRITTEN_INCREMENT) BSHIFT: Possible bad parsing of shift operation (BSHIFT_WRONG_ADD_PRIORITY) IM: Integer multiply of result of integer remainder (IM_MULTIPLYING_RESULT_OF_IREM) USELESS_STRING: Invocation of toString on an unnamed array (DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY) DMI: Bad constant value for month (DMI_BAD_MONTH) QBA: Method assigns boolean literal in boolean expression (QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT) DMI: Vacuous call to collections (DMI_VACUOUS_SELF_COLLECTION_CALL) DMI: D\u2019oh! A nonsensical method invocation (DMI_DOH) DMI: Collections should not contain themselves (DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES)","title":"Correctness (CORRECTNESS)"},{"location":"patterns/#malicious-code-vulnerability-malicious_code","text":"FI: Finalizer should be protected, not public (FI_PUBLIC_SHOULD_BE_PROTECTED)","title":"Malicious code vulnerability (MALICIOUS_CODE)"},{"location":"patterns/#multithreaded-correctness-mt_correctness","text":"STCAL: Static Calendar field (STCAL_STATIC_CALENDAR_INSTANCE) STCAL: Static DateFormat (STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE) VO: A volatile reference to an array doesn\u2019t treat the array elements as volatile (VO_VOLATILE_REFERENCE_TO_ARRAY) WL: Synchronization on getClass rather than class literal (WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL) No: Using notify() rather than notifyAll() (NO_NOTIFY_NOT_NOTIFYALL)","title":"Multithreaded correctness (MT_CORRECTNESS)"},{"location":"patterns/#performance-performance","text":"Dm: Maps and sets of URLs can be performance hogs (DMI_COLLECTION_OF_URLS) Dm: Method invokes inefficient new String(String) constructor (DM_STRING_CTOR) Dm: Method invokes inefficient new String() constructor (DM_STRING_VOID_CTOR) Dm: Method invokes inefficient Boolean constructor; use Boolean.valueOf(\u2026) instead (DM_BOOLEAN_CTOR) Bx: Method invokes inefficient Number constructor; use static valueOf instead (DM_NUMBER_CTOR) Bx: Method invokes inefficient floating-point Number constructor; use static valueOf instead (DM_FP_NUMBER_CTOR) Bx: Method allocates a boxed primitive just to call toString (DM_BOXED_PRIMITIVE_TOSTRING) Bx: Boxing/unboxing to parse a primitive (DM_BOXED_PRIMITIVE_FOR_PARSING) Bx: Boxing a primitive to compare (DM_BOXED_PRIMITIVE_FOR_COMPARE) Bx: Primitive value is boxed then unboxed to perform primitive coercion (BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION) Dm: Method allocates an object, only to get the class object (DM_NEW_FOR_GETCLASS) Dm: Use the nextInt method of Random rather than nextDouble to generate a random integer (DM_NEXTINT_VIA_NEXTDOUBLE) IIO: Inefficient use of String.indexOf(String) (IIO_INEFFICIENT_INDEX_OF) IIO: Inefficient use of String.lastIndexOf(String) (IIO_INEFFICIENT_LAST_INDEX_OF)","title":"Performance (PERFORMANCE)"},{"location":"patterns/#dodgy-code-style","text":"NP: Immediate dereference of the result of readLine() (NP_IMMEDIATE_DEREFERENCE_OF_READLINE) RV: Method discards result of readLine after checking if it is non-null (RV_DONT_JUST_NULL_CHECK_READLINE) UCF: Useless control flow to next line (UCF_USELESS_CONTROL_FLOW_NEXT_LINE) SA: Self assignment of local variable (SA_LOCAL_SELF_ASSIGNMENT) SA: Double assignment of local variable (SA_LOCAL_DOUBLE_ASSIGNMENT) SA: Double assignment of field (SA_FIELD_DOUBLE_ASSIGNMENT) DMI: Code contains a hard coded reference to an absolute pathname (DMI_HARDCODED_ABSOLUTE_FILENAME) DMI: Invocation of substring(0), which returns the original value (DMI_USELESS_SUBSTRING)","title":"Dodgy code (STYLE)"},{"location":"pr/","text":"The files of pull requests and reports generated by Codegex is available here . Diversity To evaluate the real capability of Codegex in generating review comments, we build a crawler to get the 10977 most recently opened PRs in GitHub. We select the PRs that have at least one code change in Java files (because our tool only analyzes Java files). This results in 4256 PRs from 2769 different GitHub projects. As shown in the table in supplementary material , the evaluated PRs are quite diverse as they involve patches that modify 0\u201325267 lines of code, spanning across 1 \u2013 30 different Java files. Code Review and Response In our experiments, Codegex produces 372 code review comments for 4256 PRs so it can be time-consuming to manually check for their correctness. Hence, we rely on the real developer feedbacks to assess the quality of the generated comments. In total, we received 116 feedbacks from developers with about only 10% false positives which match well with the expectation in prior study. Among the 116 feedbacks that we received from developers, 78.45% of them are positive .","title":"Pull Requests"},{"location":"pr/#diversity","text":"To evaluate the real capability of Codegex in generating review comments, we build a crawler to get the 10977 most recently opened PRs in GitHub. We select the PRs that have at least one code change in Java files (because our tool only analyzes Java files). This results in 4256 PRs from 2769 different GitHub projects. As shown in the table in supplementary material , the evaluated PRs are quite diverse as they involve patches that modify 0\u201325267 lines of code, spanning across 1 \u2013 30 different Java files.","title":"Diversity"},{"location":"pr/#code-review-and-response","text":"In our experiments, Codegex produces 372 code review comments for 4256 PRs so it can be time-consuming to manually check for their correctness. Hence, we rely on the real developer feedbacks to assess the quality of the generated comments. In total, we received 116 feedbacks from developers with about only 10% false positives which match well with the expectation in prior study. Among the 116 feedbacks that we received from developers, 78.45% of them are positive .","title":"Code Review and Response"}]}